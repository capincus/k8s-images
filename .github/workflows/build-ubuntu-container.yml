name: Build ubuntu container

on:
  push:
  pull_request:

jobs:
  test-e2e:
    strategy:
      matrix:
        base:
        - ubuntu/24.04/cloud
        kubernetes:
        - v1.31.1
    name: Run on Ubuntu
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
    steps:
      - name: Clone the code
        uses: actions/checkout@v4

      - run: |
          cd .github && docker compose up -d
          docker ps -a
          curl -LO https://github.com/lxc/incus/releases/latest/download/bin.linux.incus.x86_64
          sudo install *incus* /usr/local/bin/incus

      - uses: nick-fields/retry@v3
        with:
          timeout_seconds: 15
          max_attempts: 30
          continue_on_error: false
          command: |
            docker exec -i incus incus config show

      - uses: actions/github-script@v7
        with:
          script: |
            const audience = 'incus';
            const homedir = require("os").homedir();
            const idToken = await core.getIDToken(audience);
            await io.mkdirP(homedir + "/.config/incus/oidctokens")
            await io.mkdirP("./shared")
            await io.cp("./.github/config.yml", homedir + "/.config/incus/config.yml")
            require("fs").writeFileSync(homedir + "/.config/incus/oidctokens/incus.json", JSON.stringify({
              "access_token": idToken,
              "token": "bearer",
            }))
            require("fs").writeFileSync("./shared/incus.txt", idToken)

      - run: |
          mkdir -p ~/.config/incus/servercerts
          docker cp incus:/var/lib/incus/server.crt ~/.config/incus/servercerts/incus.crt
          docker exec -i incus incus config set core.https_address :8443
          docker exec -i incus incus config set oidc.audience incus
          docker exec -i incus incus config set oidc.client.id incus
          docker exec -i incus incus config set oidc.issuer https://token.actions.githubusercontent.com
          incus profile list
          incus profile show default
          incus storage create default dir
          incus profile device add default root disk pool=default path=/
          incus network create br0 --type=bridge
          incus profile device add default eth0 nic name=eth0 nictype=bridged parent=br0
          sudo sysctl -w net.ipv4.ip_forward=1
          sudo iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE

      - run: |
          BASE=${{ matrix.base }}
          KUBERNETES=${{ matrix.kubernetes }}
          INSTANCE_NAME=builder
          incus launch images:${{ matrix.base }} ${INSTANCE_NAME}

          FILE_NAME="./installer/${BASE//\//_}.sh"
          incus file push "$FILE_NAME" ${INSTANCE_NAME}//tmp/config.sh
          incus exec ${INSTANCE_NAME} -- bash /tmp/config.sh ${{ matrix.kubernetes }}
          incus exec ${INSTANCE_NAME} -- rm /tmp/config.sh || true
          incus exec ${INSTANCE_NAME} -- bash -c "rm /etc/ssh/ssh_host_*"
          incus exec ${INSTANCE_NAME} -- bash -c "rm -r /tmp/*"
          incus exec ${INSTANCE_NAME} -- cloud-init clean --logs
          incus exec ${INSTANCE_NAME} -- rm /root/.bash_history || true
